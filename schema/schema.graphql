type Query {
  artist(id: ID!): Artist
  label(id: ID!): Label
  release(id: ID!): CompleteRelease
  user(id: ID!): User
}

type Mutation {
  signup(username: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  addFavArtist(id: ID!): [String!]!
  addFavLabel(id: ID!): [String!]!
  addFavEP(id: ID!): [String!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  favArtists: [ID!]!
  favLabels: [ID!]!
  favEPs: [ID!]!
  # EPsToListen: [ID!]!
  # alreadyListened: [ID!]!
}

type AuthPayload {
  token: String
  user: User
}

type Artist {
  id: ID!
  name: String
  namevariations: [String]
  members: [Artist]
  aliases: [Alias]
  groups: [Group]
  profile: String
  urls: [String]
  image: String
  releases: [ShortRelease]
}

type Alias {
  id: ID!
  name: String
  resourceUrl: String
}

type Group {
  id: ID!
  name: String
  resourceUrl: String
  active: Boolean
}

interface Release {
  id: ID!
  label: String
  title: String
  year: Int
}

type ShortRelease implements Release {
  id: ID!
  format: String
  label: String
  title: String
  artist: String
  year: Int
}

type CompleteRelease implements Release {
  id: ID!
  formats: [String]
  label: String
  title: String
  year: Int
  artists: [Artist]
  labels: [Label]
  country: String
  released_formatted: String
  videos: [Video]
  genres: [String]
  styles: [String]
  tracklist: [Track]
}

type Video {
  uri: String
  title: String
  duration: Int
}

type Track {
  position: String
  type: String
  title: String
  duration: String
}

type Label {
  id: ID!
  name: String
  image: String
  releases: [ShortRelease]!
}
